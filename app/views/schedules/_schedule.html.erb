<div class='py-1 text-center container-fluid' id='content'>
    <% if @schedule and @schedule.name %>
        <h2 class='text-center mb-3'><%= @schedule.name %></h2>
    <% else %>
        <h2 class='text-center mb-3'>New Schedule</h2>
	    <% if !@user %>
	        <small>Please register or login to save schedules</small>
	    <% end %>
    <% end %>
    <div class='row no-gutters'>
        <div class='col-md-3 mb-3' align="center" id='sidebar'>
            <div class="row container justify-content-between no-gutters">
                <div class="col-6 col-md-12">
                    <h4 class='text-center mb-3'>Options</h4>
                    <label>
                        <input id='chk165' class='mb-3' type='checkbox' onclick='toggle165()'> Use 165 over 161
                    </label>
                    <button class='btn btn-primary mb-3' onclick='clear_schedule()'>Clear Schedule</button>
                    <% if @schedule and @schedule.name %>
                        <button class='btn btn-info mb-3' onclick='window.location.reload()'>Reload Schedule</button>
                    <% end %>
                    <% if @user and @editable %>
                        <button class='btn btn-success mb-3' id="save_button" onclick='setup_form()' data-toggle="modal" data-target="#form_modal"><%= @schedule and @schedule.name ? 'Update' : 'Save' %> Schedule</button>
                    <% end %>
                    <% if @schedule and @schedule.name and @editable %>
                        <%= link_to 'Delete Schedule',  @schedule,  method: :delete, class:'btn btn-warning mb-3', data: { confirm: 'Are you sure you want to delete this schedule?' } %>
                    <% end %>
                </div>
                <div class="col-6 col-md-12">
                    <h4 class='text-center mb-3'>Key</h4>
                    <div class='list-group'>
                        <div class='list-group list-group-item example'>
                            <strong>Valid Spot</strong>
                            <div class="list-group-item example satisfied">
                                Placeable Class
                            </div>
                            <div class="list-group-item example unsatisfied">
                                Prereqs Unmet
                            </div>
                            <div class="list-group-item example elective unsatisfied">
                                Elective
                            </div>
                            <div class="list-group-item example prereq">
                                Prerequisite
                            </div>
                        </div>
                        <div class='list-group-item example invalid'>
                            <strong>Invalid Spot</strong>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class='col-md-4 col-sm-6 mb-3'>
            <div id='courses' class='container dragula-container list-group'></div>
        </div>
        <div class='col-md-5 col-sm-6 mb-3'>
            <div id='quarters' class='container list-group'>
                <div class='list-group-item list-group-horizontal'>
                    <div class='list-group-item dragula-container' id='prevButton' onclick='addPrev()'>+</div>
                    <div class='list-group-item' id='removePrevButton' onclick='removePrev()'>-</div>
                </div>
                <div id='Q0' class='dragula-container list-group-item'></div>
                <div class='list-group-item list-group-horizontal'>
                    <div class='list-group-item dragula-container' id='nextButton' onclick='addNext()'>+</div>
                    <div class='list-group-item' id='removeNextButton' onclick='removeNext()'>-</div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="form_modal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
        <%= form_for @schedule, html: {class: "form-signin needs-validation", novalidate: true } do |f|%>
            <h1 class="text-center h3 mb-3 font-weight-normal">Save Schedule</h1>
            <%= f.text_field :name, class: "form-control", placeholder: "Schedule Name", required: true, autofocus: true %>
            <%= f.radio_button :is_public, "false", :checked => true , class: 'inline mr-3 mb-2' %>     Keep Private<br>
            <%= f.radio_button :is_public, "true", class: 'inline mr-3 mb-3' %>    Make Public
            <%= f.hidden_field :representation, id:"representation" %>
            <%= f.hidden_field :use_165, id:"use_165" %>
            <%= f.hidden_field :start_quarter, id:"start_quarter" %>
            <%= f.submit 'Save', class: "btn btn-lg btn-primary btn-block bg-beaver" %>
      <% end %>
    </div>
  </div>
</div>
<script type="text/javascript">
// Classes with their codes, names, prereqs, and whether or not they are an elective
var courses = {
	CS165: {
			name: "Introduction to Computer Science I/II",
			restrictedTo: ["Fall", "Winter", "Spring"]
	},
	CS161: {
			name: "Introduction to Computer Science I"
	},
	CS162: {
			name: "Introduction to Computer Science II",
			prereqs: ["CS161"]
	},
	CS225: {
			name: "Discrete Structures",
	},
	CS271: {
			name: "Computer Architecture & Assembly Language",
			prereqs: ["CS161"]
	},
	CS261: {
			name: "Data Structures",
			prereqs: ["CS162", "CS225"]
	},
	CS290: {
			name: "Web Development",
			prereqs: ["CS162"]
	},
	CS340: {
			name: "Introduction to Databases",
			prereqs: ["CS290"]
	},
	CS325: {
			name: "Analysis of Algorithms",
			prereqs: ["CS261", "CS225"]
	},
	CS344: {
			name: "Operating Systems",
			prereqs: ["CS261", "CS271"]
	},
	CS361: {
			name: "Software Engineering I",
			prereqs: ["CS261"]
	},
	CS362: {
			name: "Software Engineering II",
			prereqs: ["CS261"]
	},
	CS372: {
			name: "Intro to Computer Networks",
			prereqs: ["CS271", "CS261"]
	},
	CS467: {
			name: "Software Projects",
			prereqs: ["CS361", "CS344"]
	},
	CS352: {
			name: "Introduction to Usability Engineering",
			elective: true,
			prereqs: ["CS161"]
	},
	CS475: {
			name: "Parallel Programming",
			elective: true,
			prereqs: ["CS261"],
			restrictedTo: ["Spring"]
	},
	CS373: {
			name: "Defense Against the Dark Arts",
			elective: true,
			prereqs: ["CS340", "CS372", "CS344"],
			restrictedTo: ["Winter", "Summer"]
	},
	CS464: {
			name: "Open Source Software Development",
			elective: true,
			prereqs: ["CS361"],
			restrictedTo: ["Summer", "Fall", "Spring"]
	},
	CS492: {
			name: "Mobile Software Development",
			elective: true,
			prereqs: ["CS344"],
			restrictedTo: ["2019"],
			note: "This class's availablility and prereqs are purely speculation"
	},
	CS493: {
			name: "Cloud Software Development",
			elective: true,
			prereqs: ["CS290", "CS340", "CS372"],
			restrictedTo: ["Fall - 2018", "Winter - 2019"],
			note: "This class is only confirmed for the Fall 2018 and Winter 2019 semesters"
	},
	CS496: {
			name: "Mobile and Cloud Software Development",
			elective: true,
			prereqs: ["CS344"],
			note: "This class is no longer available as of the summer 2018"
	}
};

var from_cache = false;
var cs165 = false;

var today, // Today's date
	oldestQuarter, // Date of the earliest quarter shown in the schedule
	newestQuarter, // Date of the lastest quarter shown in the schedule
	firstQuarterNum = 0; // Numeric representation of the first quarter (number of quarters after the current)

removedContainers = [];

// Setup drag and drop
var dragAndDrop = dragula({
	revertOnSpill: true,
	// Disallow anything but courses with satisfied prereqs to be moved
	invalid: function(el, handle) {
			return el.className.includes("unsatisfied");
	},
	mirrorContainer: document.body
});

// Any time a course is picked up
dragAndDrop.on("drag", function(el, source) {

	// Disallow drops into a quarter before its prereq
	if (courses[el.id].prereqs) {
			var earliestValidQuarter = getCoursesEarliestQuarter(el.id);

			for (var i = firstQuarterNum; i < earliestValidQuarter; i++) {
					removeContainer("#Q" + i);
			}
			removeContainer("#prevButton");
	}

	// Disallow drops into a quarter after a course if it's one of its prereq
	var latestValidQuarter = getCoursesLatestQuarter(el.id);

	if (latestValidQuarter !== undefined) {
			for (var i = latestValidQuarter + 1; i < getNumOfQuarters() + firstQuarterNum; i++) {
					removeContainer(("#Q" + i));
			}
			removeContainer("#nextButton");
	}

	// Visually indicate - buttons are not containers
	$("#removePrevButton").addClass("invalid");
	$("#removeNextButton").addClass("invalid");
});

// Any time a course is dropped
dragAndDrop.on("dragend", function() {
	restoreRemovedContainers();

	// Restore look of - buttons
	$("#removePrevButton").removeClass("invalid");
	$("#removeNextButton").removeClass("invalid");
});

// Any time a course is moved to a quarter or the course bucket
dragAndDrop.on("drop", function(el, target, source, sibling) {

	// If the course was dropped into a button, "click" the button and move the
	// course to the newly created quarter
	if (target.id == "prevButton") {
			var newQuarter = addPrev();
			$("#" + newQuarter).append(el);
	} else if (target.id == "nextButton") {
			var newQuarter = addNext();
			$("#" + newQuarter).append(el);
	}

	// If the course has a semester restriction, warn the user
	if (courses[el.id].restrictedTo && !$(el).parent().text().startsWith(courses[el.id].restrictedTo)) {
			console.log("bad");
	}

	updatePrereqs(sibling, target);
});

// jquery after page loads
function setup() { 
	// Build html elements for each of the courses
	for (var id in courses) {
			var html = "<div id='" + id + "' class='list-group-item'><strong>" + id + "</strong> - " + courses[id].name + "</div>";
			$("#courses").append(html);

			if (courses[id].elective) {
					$("#" + id).addClass("elective");
			}
			if (courses[id].prereqs) {
					$("#" + id).addClass("unsatisfied");
					$("#" + id).hover(function() {
							courses[this.id].prereqs.forEach(function(prereq) {
									$("#" + prereq).addClass("prereq");
							});
					}, function() {
							courses[this.id].prereqs.forEach(function(prereq) {
									$("#" + prereq).removeClass("prereq");
							});
					});
			}
	}

	// Hide 165
	$("#CS165").hide();

	// register all of the places courses can be dragged to with the drag/drop handler
	for (var i = 0; i < $(".dragula-container").length; dragAndDrop.containers.push($(".dragula-container")[i++]));

	from_cache = true;
};

// Disallow drops into a container
function removeContainer(id) {
	removedContainers.push(id);
	$(id).addClass("invalid");
	var index = dragAndDrop.containers.indexOf($(id)[0]);
	dragAndDrop.containers.splice(index, 1);
}

// Reallow drops in any containers removed due to prereqs
function restoreRemovedContainers() {
	removedContainers.forEach(function(id) {
			dragAndDrop.containers.push($(id)[0]);
			$(id).removeClass("invalid");
	});
	removedContainers = [];
}

// Get the earliest quarter a course with prereqs can be dropped into
function getCoursesEarliestQuarter(id) {
	var earliestValidQuarter = firstQuarterNum;

	// Get the earliest quarter the course can be dropped into
	courses[id].prereqs.forEach(function(prereq) {
			var prereqQuarter = +($("#" + prereq).parent().attr('id').slice(1));
			if (prereqQuarter >= earliestValidQuarter) {
					earliestValidQuarter = (id == "CS340") ? prereqQuarter : prereqQuarter + 1;
			}
	});
	return earliestValidQuarter;
}

// Get the latest quarter a course that is a prereq can be dropped into
function getCoursesLatestQuarter(id) {
	var latestValidQuarter;
	$("#quarters>.dragula-container>*").each(function() {
			if (courses[this.id].prereqs && courses[this.id].prereqs.indexOf(id) >= 0) {
					var postreqQuarter = +($("#" + this.id).parent().attr('id').slice(1));
					if (latestValidQuarter === undefined || postreqQuarter <= latestValidQuarter) {
							latestValidQuarter = (this.id == "CS340") ? postreqQuarter : postreqQuarter - 1;
					}
			}
	});
	return latestValidQuarter;
}


// Remove courses from quarters if their prereq has been removed. Allow dragging
// and dropping for courses whose prereqs have been satisfied.
function updatePrereqs(sibling, target) {
	for (var id in courses) {
			if (courses[id].prereqs) {
					var satisfied = true;
					courses[id].prereqs.forEach(function(prereq) {
							if ($("#" + prereq).parent()[0] == $("#courses")[0]) {
									// If this course's prereq course not been assigned to a quarter,disallow drag and drop
									$("#" + id).addClass("unsatisfied");
									satisfied = false;

									// If this course had been assigned a quarter, move it back to the course bucket
									if ($("#" + id).parent().parent()[0] == $("#quarters")[0]) {
											if ($("#" + id).hasClass('elective')) {
													$(target).append($("#" + id));
											} else {
													$(sibling).after($("#" + id));
											}
									}
							}
					});

					// If all this course's prereqs have been assigned a quarter, allow drag and drop
					if (satisfied) $("#" + id).removeClass("unsatisfied");
			}
	}
}

// Get the name of a quarter as a two character string and year
function getQuarterName(date) {
	return ["Winter", "Spring", "Summer", "Fall"][Math.floor(date.getMonth() / 3)] + " - " + date.getFullYear();
}

// Get the current number of quarters displayed
function getNumOfQuarters() {
	return $("#quarters>div:not(.list-group-horizontal)").length;
}

// Add a container for the next earliest quarter
function addPrev() {
	var prevQuarter = new Date(oldestQuarter.getFullYear(), oldestQuarter.getMonth() - 3),
			id = "Q" + --firstQuarterNum;

	$("#quarters>:first-child").after("<div id='" + id + "' class='dragula-container list-group-item'>" + getQuarterName(prevQuarter) + "</div>");
	dragAndDrop.containers.push($("#" + id)[0]);

	oldestQuarter = prevQuarter;

	return id;
}

// Add a container for the next earliest quarter
function addNext() {
	var nextQuarter = new Date(newestQuarter.getFullYear(), newestQuarter.getMonth() + 3),
			id = "Q" + (getNumOfQuarters() + firstQuarterNum);

	$("#quarters>:last-child").before("<div id='" + id + "' class='dragula-container list-group-item'>" + getQuarterName(nextQuarter) + "</div>");
	dragAndDrop.containers.push($("#" + id)[0]);

	newestQuarter = nextQuarter;

	return id;
}

// Remove the first quarter
function removePrev() {
	var nextQuarter = new Date(oldestQuarter.getFullYear(), oldestQuarter.getMonth() + 3),
			id = "Q" + firstQuarterNum;

	// Don't remove the last quarter
	if (getNumOfQuarters() != 1) {
			var index = dragAndDrop.containers.indexOf($("#" + id)[0]);
			dragAndDrop.containers.splice(index, 1);

			$("#" + id).children().each(function() {
					// Move any class in this quarter to the courses container
					// Don't need to check for electives because no electives can be in the first quarter?
					$("#courses>:first-child").after(this);
					updatePrereqs($(this), $("#courses"));
			});

			$("#" + id).remove();

			firstQuarterNum++;
			oldestQuarter = nextQuarter;
	}
}

// Remove the last quarter
function removeNext() {
	var prevQuarter = new Date(newestQuarter.getFullYear(), newestQuarter.getMonth() - 3),
			id = "Q" + (getNumOfQuarters() + firstQuarterNum - 1);

	// Don't remove the last quarter
	if (getNumOfQuarters() != 1) {
			var index = dragAndDrop.containers.indexOf($("#" + id)[0]);
			dragAndDrop.containers.splice(index, 1);

			$("#" + id).children().each(function() {
					if ($(this).hasClass('elective')) {
							$("#courses").append($(this));
					} else {
							$("#courses>:first-child").after(this);
					}
					updatePrereqs($(this), $("#courses"));
			});

			$("#" + id).remove();

			newestQuarter = prevQuarter;
	}
}

// Switch between using the cs165 option and 161/162
function toggle165() {
	if (cs165) {
			// Update prereqs
			courses.CS271.prereqs = ["CS161"];
			courses.CS352.prereqs = ["CS161"];
			courses.CS261.prereqs = ["CS162", "CS225"];
			courses.CS290.prereqs = ["CS162"];

			// Unhide new course and move it to where 161 was
			$("#CS165").after($("#CS161"));
			$("#CS161").show();
			$("#CS162").show();

			// Hide old courses and move them back to the courses tab
			$("#CS165").hide();
			$("#courses>:first-child").before($("#CS165"));

			updatePrereqs($("#CS161"), $("#CS165").parent());
			cs165 = false;
	} else {

			// Update prereqs
			courses.CS271.prereqs = ["CS165"];
			courses.CS352.prereqs = ["CS165"];
			courses.CS261.prereqs = ["CS165", "CS225"];
			courses.CS290.prereqs = ["CS165"];

			// Unhide new course and move it to where 161 was
			$("#CS161").before($("#CS165"));
			$("#CS165").show();

			// Hide old courses and move them back to the courses tab
			$("#CS161").hide();
			$("#CS162").hide();
			$("#courses>:first-child").after($("#CS162"));
			$("#courses>:first-child").before($("#CS161"));

			updatePrereqs($("#CS161"), $("#CS165").parent());
			cs165 = true;
	}
}

function clear_schedule() {
	$("#courses>:first-child").before($("#CS225"));
	$("#courses>:first-child").before($("#CS165"));
	$("#courses>:first-child").before($("#CS161"));

	updatePrereqs($("#CS225"), $("#CS165").parent());
}

// Display an alert with a link to the current schedule
function setup_form() {
	$("#start_quarter").val(oldestQuarter.getTime());
	$("#use_165").val(cs165);
	var str = "";
	$("#quarters>div:not(.list-group-horizontal)").each(function() {
			str += "-";
			$(this).children().each(function() {
					str += "+" + this.id;
			});
	});
	$("#representation").val(str);
}

// Set up a schedule based on the current link
function populate_schedule(data, start_quarter, use_165) {

    var today = start_quarter ? new Date(+start_quarter) : new Date();
    oldestQuarter = newestQuarter = today;
    $("#Q0").prepend(getQuarterName(today));

    if (use_165 == "true") {
        $("#chk165").prop('checked', true);
        toggle165();
    }

    if (data) {
        var quarters = data.split('-');
        quarters.shift();
        quarters.forEach(function(quarter, i) {
            var quarterId = i ? addNext() : "Q0";
            var classes = quarter.split("+");
            classes.shift();
            classes.forEach(function(classId) {
                $("#" + quarterId).append($("#" + classId));
            });
        });
        updatePrereqs($("#courses>:first-child"), $("#courses"));
    }
}


setup();
populate_schedule("<%= @schedule.representation %>", "<%= @schedule.start_quarter %>", "<%= @schedule.use_165 %>"); 

</script>
